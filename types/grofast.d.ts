/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/auth/verify-otp": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Verify Firebase OTP and authenticate user
         * @description Verify Firebase ID token and create/login user.
         *
         *     **Validation Rules:**
         *     - firebase_id_token: Required, must be valid Firebase JWT
         *     - Token must not be expired
         *     - Token must be from authorized Firebase project
         *
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /**
                         * @description Firebase ID token from client SDK
                         * @example eyJhbGciOiJSUzI1NiIsImtpZCI6IjE2NzAyN
                         */
                        firebase_id_token: string;
                    };
                };
            };
            responses: {
                /** @description Authentication successful */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["UserResponse"];
                    };
                };
                /** @description Invalid token format */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
                /** @description Token expired or invalid */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
                /** @description Not Acceptable - Invalid Accept header */
                406: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
                /** @description Unsupported Media Type */
                415: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
                /** @description Too Many Requests */
                429: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
                /** @description Authentication service error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
                /** @description Unexpected error */
                default: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/me": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get current user profile
         * @description Retrieve authenticated user's profile information
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description User profile retrieved successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["UserResponse"];
                    };
                };
                /** @description Unauthorized - Invalid or missing token */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
                /** @description Forbidden - Insufficient permissions */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
                /** @description User not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
                /** @description Not Acceptable - Invalid Accept header */
                406: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
                /** @description Too Many Requests */
                429: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
                /** @description Unexpected error */
                default: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
            };
        };
        /**
         * Update user profile
         * @description Update authenticated user's profile information.
         *
         *     **Validation Rules:**
         *     - name: 2-50 characters, letters and spaces only
         *     - email: Valid email format
         *     - phone: 10-15 digits, international format supported
         *     - address: 10-200 characters
         *     - fcm_token: Valid FCM token format
         *
         */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /**
                         * @description Full name (letters and spaces only)
                         * @example John Doe
                         */
                        name?: string;
                        /**
                         * Format: email
                         * @description Valid email address
                         * @example john.doe@example.com
                         */
                        email?: string;
                        /**
                         * @description Phone number (10-15 digits, optional country code)
                         * @example +1234567890
                         */
                        phone?: string;
                        /**
                         * @description Delivery address
                         * @example 123 Main St, City, State 12345
                         */
                        address?: string;
                        /**
                         * @description Firebase Cloud Messaging token
                         * @example dGhpcyBpcyBhIGZha2UgZmNtIHRva2Vu
                         */
                        fcm_token?: string;
                    };
                };
            };
            responses: {
                /** @description Profile updated successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["UserResponse"];
                    };
                };
                /** @description Validation error */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ValidationErrorResponse"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
                /** @description Forbidden - Insufficient permissions */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
                /** @description User not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
                /** @description Not Acceptable - Invalid Accept header */
                406: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
                /** @description Unsupported Media Type */
                415: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
                /** @description Too Many Requests */
                429: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
                /** @description Unexpected error */
                default: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
            };
        };
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/products/categories": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get product categories
         * @description Retrieve all active product categories
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Categories retrieved successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            categories?: components["schemas"]["CategoryResponse"][];
                            /** @description True if fallback data is returned due to service unavailability */
                            fallback?: boolean;
                        };
                    };
                };
                /** @description Not Acceptable - Invalid Accept header */
                406: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
                /** @description Too Many Requests */
                429: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
                /** @description Service unavailable */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
                /** @description Unexpected error */
                default: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/products": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get products with filtering and search
         * @description Retrieve products with optional filtering, searching, and pagination.
         *
         *     **Query Parameter Validation:**
         *     - page: Integer >= 1, default 1
         *     - size: Integer 1-100, default 20
         *     - category_id: Integer >= 1
         *     - search: 2-50 characters
         *     - min_price: Decimal >= 0
         *     - max_price: Decimal >= min_price
         *     - sort_by: Enum values only
         *
         */
        get: {
            parameters: {
                query?: {
                    /** @description Page number for pagination */
                    page?: number;
                    /** @description Number of items per page */
                    size?: number;
                    /** @description Filter by category ID */
                    category_id?: number;
                    /** @description Search term for product name/description */
                    search?: string;
                    /** @description Minimum price filter */
                    min_price?: number;
                    /** @description Maximum price filter */
                    max_price?: number;
                    /** @description Sort products by field */
                    sort_by?: "name" | "price" | "created_at" | "popularity";
                    /** @description Sort order */
                    sort_order?: "asc" | "desc";
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Products retrieved successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            products?: components["schemas"]["ProductResponse"][];
                            /**
                             * Format: int32
                             * @description Total number of products matching criteria
                             * @example 150
                             */
                            total?: number;
                            /**
                             * Format: int32
                             * @description Current page number
                             * @example 1
                             */
                            page?: number;
                            /**
                             * Format: int32
                             * @description Items per page
                             * @example 20
                             */
                            size?: number;
                            /**
                             * Format: int32
                             * @description Total number of pages
                             * @example 8
                             */
                            total_pages?: number;
                            /** @description True if fallback data is returned */
                            fallback?: boolean;
                        };
                    };
                };
                /** @description Invalid query parameters */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ValidationErrorResponse"];
                    };
                };
                /** @description Not Acceptable - Invalid Accept header */
                406: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
                /** @description Too Many Requests */
                429: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
                /** @description Unexpected error */
                default: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/products/{product_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get product details
         * @description Retrieve detailed information about a specific product.
         *
         *     **Path Parameter Validation:**
         *     - product_id: Integer >= 1
         *
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Product ID */
                    product_id: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Product details retrieved successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ProductResponse"];
                    };
                };
                /** @description Product not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
                /** @description Not Acceptable - Invalid Accept header */
                406: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
                /** @description Too Many Requests */
                429: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
                /** @description Unexpected error */
                default: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cart": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get user's cart
         * @description Retrieve current user's shopping cart with all items
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Cart retrieved successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["CartResponse"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
                /** @description Forbidden - Insufficient permissions */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
                /** @description Cart not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
                /** @description Not Acceptable - Invalid Accept header */
                406: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
                /** @description Too Many Requests */
                429: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
                /** @description Unexpected error */
                default: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cart/add": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Add item to cart
         * @description Add a product to the user's cart or update quantity if already exists.
         *
         *     **Validation Rules:**
         *     - product_id: Required, integer >= 1, must exist in catalog
         *     - quantity: Integer 1-99, default 1
         *     - System validates product availability and stock
         *
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /**
                         * Format: int32
                         * @description ID of the product to add
                         * @example 123
                         */
                        product_id: number;
                        /**
                         * Format: int32
                         * @description Quantity to add to cart
                         * @default 1
                         * @example 2
                         */
                        quantity?: number;
                    };
                };
            };
            responses: {
                /** @description Item added to cart successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["CartResponse"];
                    };
                };
                /** @description Validation error or insufficient stock */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ValidationErrorResponse"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
                /** @description Forbidden - Insufficient permissions */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
                /** @description Product not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
                /** @description Not Acceptable - Invalid Accept header */
                406: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
                /** @description Unsupported Media Type */
                415: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
                /** @description Too Many Requests */
                429: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
                /** @description Unexpected error */
                default: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cart/remove": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Remove item from cart
         * @description Remove a product from the user's cart or decrease quantity.
         *
         *     **Validation Rules:**
         *     - product_id: Required, integer >= 1
         *     - quantity: Optional, integer 1-99, removes all if not specified
         *
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /**
                         * Format: int32
                         * @description ID of the product to remove
                         * @example 123
                         */
                        product_id: number;
                        /**
                         * Format: int32
                         * @description Quantity to remove (removes all if not specified)
                         * @example 1
                         */
                        quantity?: number;
                    };
                };
            };
            responses: {
                /** @description Item removed from cart successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["CartResponse"];
                    };
                };
                /** @description Validation error */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ValidationErrorResponse"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
                /** @description Forbidden - Insufficient permissions */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
                /** @description Product not found in cart */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
                /** @description Not Acceptable - Invalid Accept header */
                406: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
                /** @description Unsupported Media Type */
                415: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
                /** @description Too Many Requests */
                429: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
                /** @description Unexpected error */
                default: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cart/clear": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Clear entire cart
         * @description Remove all items from the user's cart
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Cart cleared successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example Cart cleared successfully */
                            message?: string;
                            cart?: components["schemas"]["CartResponse"];
                        };
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
                /** @description Forbidden - Insufficient permissions */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
                /** @description Cart not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
                /** @description Not Acceptable - Invalid Accept header */
                406: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
                /** @description Too Many Requests */
                429: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
                /** @description Unexpected error */
                default: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/orders/create": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create order from cart
         * @description Create a new order from the user's current cart items.
         *
         *     **Validation Rules:**
         *     - delivery_address: Required, 10-200 characters
         *     - delivery_time_slot: Required, valid time slot ID
         *     - payment_method: Required, enum values only
         *     - special_instructions: Optional, max 500 characters
         *
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /**
                         * @description Full delivery address
                         * @example 123 Main St, Apt 4B, City, State 12345
                         */
                        delivery_address: string;
                        /**
                         * @description Preferred delivery time slot
                         * @example 15-17
                         * @enum {string}
                         */
                        delivery_time_slot: "9-11" | "11-13" | "13-15" | "15-17" | "17-19" | "19-21";
                        /**
                         * @description Payment method
                         * @example card
                         * @enum {string}
                         */
                        payment_method: "cash" | "card" | "upi" | "wallet";
                        /**
                         * @description Special delivery instructions
                         * @example Ring doorbell twice
                         */
                        special_instructions?: string;
                    };
                };
            };
            responses: {
                /** @description Order created successfully */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["OrderResponse"];
                    };
                };
                /** @description Validation error or empty cart */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ValidationErrorResponse"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
                /** @description Forbidden - Insufficient permissions */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
                /** @description Cart not found or empty */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
                /** @description Not Acceptable - Invalid Accept header */
                406: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
                /** @description Unsupported Media Type */
                415: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
                /** @description Too Many Requests */
                429: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
                /** @description Unexpected error */
                default: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/orders/my-orders": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get user's orders
         * @description Retrieve all orders for the authenticated user with pagination.
         *
         *     **Query Parameter Validation:**
         *     - page: Integer >= 1, default 1
         *     - size: Integer 1-50, default 10
         *     - status: Optional status filter
         *
         */
        get: {
            parameters: {
                query?: {
                    /** @description Page number for pagination */
                    page?: number;
                    /** @description Number of orders per page */
                    size?: number;
                    /** @description Filter by order status */
                    status?: "pending" | "confirmed" | "preparing" | "out_for_delivery" | "delivered" | "cancelled";
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Orders retrieved successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            orders?: components["schemas"]["OrderResponse"][];
                            /**
                             * Format: int32
                             * @description Total number of orders
                             * @example 25
                             */
                            total?: number;
                            /**
                             * Format: int32
                             * @description Current page number
                             * @example 1
                             */
                            page?: number;
                            /**
                             * Format: int32
                             * @description Orders per page
                             * @example 10
                             */
                            size?: number;
                            /**
                             * Format: int32
                             * @description Total number of pages
                             * @example 3
                             */
                            total_pages?: number;
                        };
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
                /** @description Forbidden - Insufficient permissions */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
                /** @description Not Acceptable - Invalid Accept header */
                406: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
                /** @description Too Many Requests */
                429: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
                /** @description Unexpected error */
                default: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/orders/{order_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get order details
         * @description Retrieve detailed information about a specific order.
         *
         *     **Path Parameter Validation:**
         *     - order_id: Integer >= 1
         *
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Order ID */
                    order_id: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Order details retrieved successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["OrderResponse"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
                /** @description Forbidden - Access denied to this order */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
                /** @description Order not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
                /** @description Not Acceptable - Invalid Accept header */
                406: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
                /** @description Too Many Requests */
                429: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
                /** @description Unexpected error */
                default: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/orders/{order_id}/status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Update order status
         * @description Update the status of an order (admin/delivery partner only).
         *
         *     **Validation Rules:**
         *     - status: Required, valid enum value
         *     - notes: Optional, max 500 characters
         *
         */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Order ID */
                    order_id: number;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /**
                         * @description New order status
                         * @example confirmed
                         * @enum {string}
                         */
                        status: "confirmed" | "preparing" | "out_for_delivery" | "delivered" | "cancelled";
                        /**
                         * @description Status update notes
                         * @example Order confirmed and being prepared
                         */
                        notes?: string;
                    };
                };
            };
            responses: {
                /** @description Order status updated successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["OrderResponse"];
                    };
                };
                /** @description Invalid status transition */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ValidationErrorResponse"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
                /** @description Forbidden - Insufficient permissions */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
                /** @description Order not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
                /** @description Not Acceptable - Invalid Accept header */
                406: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
                /** @description Unsupported Media Type */
                415: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
                /** @description Too Many Requests */
                429: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
                /** @description Unexpected error */
                default: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
            };
        };
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/delivery/me": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get delivery partner profile
         * @description Retrieve authenticated delivery partner's profile and statistics
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Delivery partner profile retrieved successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["DeliveryPartnerResponse"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
                /** @description Forbidden - Not a delivery partner */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
                /** @description Delivery partner not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
                /** @description Not Acceptable - Invalid Accept header */
                406: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
                /** @description Too Many Requests */
                429: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
                /** @description Unexpected error */
                default: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/delivery/status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Update delivery partner availability
         * @description Update delivery partner's availability status.
         *
         *     **Validation Rules:**
         *     - is_available: Required boolean
         *     - current_location: Required when going online
         *
         */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /**
                         * @description Availability status
                         * @example true
                         */
                        is_available: boolean;
                        current_location?: {
                            /**
                             * Format: double
                             * @description Current latitude
                             * @example 40.7128
                             */
                            latitude?: number;
                            /**
                             * Format: double
                             * @description Current longitude
                             * @example -74.006
                             */
                            longitude?: number;
                        };
                    };
                };
            };
            responses: {
                /** @description Status updated successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["DeliveryPartnerResponse"];
                    };
                };
                /** @description Validation error */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ValidationErrorResponse"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
                /** @description Forbidden - Not a delivery partner */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
                /** @description Delivery partner not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
                /** @description Not Acceptable - Invalid Accept header */
                406: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
                /** @description Unsupported Media Type */
                415: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
                /** @description Too Many Requests */
                429: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
                /** @description Unexpected error */
                default: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
            };
        };
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/delivery/location": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Update GPS location
         * @description Update delivery partner's real-time GPS location during delivery.
         *
         *     **Validation Rules:**
         *     - latitude: Required, valid GPS coordinate
         *     - longitude: Required, valid GPS coordinate
         *     - order_id: Optional, current delivery order
         *
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /**
                         * Format: double
                         * @description Current latitude
                         * @example 40.7128
                         */
                        latitude: number;
                        /**
                         * Format: double
                         * @description Current longitude
                         * @example -74.006
                         */
                        longitude: number;
                        /**
                         * Format: int32
                         * @description Current delivery order ID
                         * @example 12345
                         */
                        order_id?: number;
                    };
                };
            };
            responses: {
                /** @description Location updated successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example Location updated successfully */
                            message?: string;
                            /**
                             * Format: date-time
                             * @example 2024-01-15T12:30:00Z
                             */
                            timestamp?: string;
                        };
                    };
                };
                /** @description Invalid GPS coordinates */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ValidationErrorResponse"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
                /** @description Forbidden - Not a delivery partner */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
                /** @description Delivery partner not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
                /** @description Not Acceptable - Invalid Accept header */
                406: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
                /** @description Unsupported Media Type */
                415: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
                /** @description Too Many Requests */
                429: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
                /** @description Unexpected error */
                default: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        UserResponse: {
            /**
             * Format: int32
             * @example 123
             */
            id?: number;
            /** @example firebase_user_123 */
            firebase_uid?: string;
            /**
             * Format: email
             * @example user@example.com
             */
            email?: string;
            /** @example John Doe */
            name?: string;
            /** @example +1234567890 */
            phone?: string;
            /** @example 123 Main St, City, State 12345 */
            address?: string;
            /** @example fcm_token_here */
            fcm_token?: string;
            /** @example true */
            is_active?: boolean;
            /**
             * Format: date-time
             * @example 2024-01-15T10:30:00Z
             */
            created_at?: string;
        };
        CategoryResponse: {
            /**
             * Format: int32
             * @example 1
             */
            id?: number;
            /** @example Fruits & Vegetables */
            name?: string;
            /** @example Fresh fruits and vegetables */
            description?: string;
            /**
             * Format: uri
             * @example https://cdn.grofast.com/categories/fruits.jpg
             */
            image_url?: string;
            /** @example true */
            is_active?: boolean;
        };
        ProductResponse: {
            /**
             * Format: int32
             * @example 123
             */
            id?: number;
            /** @example Organic Red Apples */
            name?: string;
            /** @example Fresh organic red apples */
            description?: string;
            /**
             * Format: decimal
             * @example 4.99
             */
            price?: number;
            /**
             * Format: decimal
             * @example 5.99
             */
            original_price?: number;
            /**
             * Format: decimal
             * @example 16.67
             */
            discount_percentage?: number;
            /**
             * Format: int32
             * @example 100
             */
            stock_quantity?: number;
            /**
             * @example kg
             * @enum {string}
             */
            unit?: "kg" | "g" | "l" | "ml" | "piece" | "pack" | "dozen";
            /**
             * Format: uri
             * @example https://cdn.grofast.com/products/apples.jpg
             */
            image_url?: string;
            /**
             * Format: int32
             * @example 1
             */
            category_id?: number;
            category?: components["schemas"]["CategoryResponse"];
            /** @example true */
            is_active?: boolean;
            /**
             * Format: date-time
             * @example 2024-01-15T10:30:00Z
             */
            created_at?: string;
        };
        CartItemResponse: {
            /**
             * Format: int32
             * @example 456
             */
            id?: number;
            /**
             * Format: int32
             * @example 123
             */
            product_id?: number;
            /**
             * Format: int32
             * @example 2
             */
            quantity?: number;
            /**
             * Format: decimal
             * @example 4.99
             */
            price?: number;
            /**
             * Format: decimal
             * @example 9.98
             */
            total_price?: number;
            /** @example Organic Red Apples */
            product_name?: string;
            /**
             * Format: uri
             * @example https://cdn.grofast.com/products/apples.jpg
             */
            product_image?: string;
        };
        CartResponse: {
            /**
             * Format: int32
             * @example 789
             */
            id?: number;
            /**
             * Format: int32
             * @example 123
             */
            user_id?: number;
            items?: components["schemas"]["CartItemResponse"][];
            /**
             * Format: decimal
             * @example 29.94
             */
            total_amount?: number;
            /**
             * Format: int32
             * @example 6
             */
            total_items?: number;
            /**
             * Format: date-time
             * @example 2024-01-15T10:30:00Z
             */
            created_at?: string;
            /**
             * Format: date-time
             * @example 2024-01-15T11:45:00Z
             */
            updated_at?: string;
        };
        OrderItemResponse: {
            /**
             * Format: int32
             * @example 789
             */
            id?: number;
            /**
             * Format: int32
             * @example 123
             */
            product_id?: number;
            /** @example Organic Red Apples */
            product_name?: string;
            /**
             * Format: int32
             * @example 2
             */
            quantity?: number;
            /**
             * Format: decimal
             * @example 4.99
             */
            price?: number;
            /**
             * Format: decimal
             * @example 9.98
             */
            total_price?: number;
        };
        OrderResponse: {
            /**
             * Format: int32
             * @example 12345
             */
            id?: number;
            /**
             * Format: int32
             * @example 123
             */
            user_id?: number;
            /** @example ORD-2024-001234 */
            order_number?: string;
            /**
             * @example confirmed
             * @enum {string}
             */
            status?: "pending" | "confirmed" | "preparing" | "out_for_delivery" | "delivered" | "cancelled";
            items?: components["schemas"]["OrderItemResponse"][];
            /**
             * Format: decimal
             * @example 29.94
             */
            total_amount?: number;
            /**
             * Format: decimal
             * @example 2.99
             */
            delivery_fee?: number;
            /**
             * Format: decimal
             * @example 2.4
             */
            tax_amount?: number;
            /**
             * Format: decimal
             * @example 35.33
             */
            final_amount?: number;
            /** @example 123 Main St, Apt 4B, City, State 12345 */
            delivery_address?: string;
            /**
             * @example 15-17
             * @enum {string}
             */
            delivery_time_slot?: "9-11" | "11-13" | "13-15" | "15-17" | "17-19" | "19-21";
            /**
             * @example card
             * @enum {string}
             */
            payment_method?: "cash" | "card" | "upi" | "wallet";
            /**
             * @example paid
             * @enum {string}
             */
            payment_status?: "pending" | "paid" | "failed" | "refunded";
            /** @example Ring doorbell twice */
            special_instructions?: string;
            /**
             * Format: int32
             * @example 456
             */
            delivery_partner_id?: number | null;
            /**
             * Format: date-time
             * @example 2024-01-15T16:30:00Z
             */
            estimated_delivery_time?: string;
            /**
             * Format: date-time
             * @example 2024-01-15T16:25:00Z
             */
            actual_delivery_time?: string | null;
            /**
             * Format: date-time
             * @example 2024-01-15T14:30:00Z
             */
            created_at?: string;
            /**
             * Format: date-time
             * @example 2024-01-15T15:45:00Z
             */
            updated_at?: string;
        };
        DeliveryPartnerResponse: {
            /**
             * Format: int32
             * @example 456
             */
            id?: number;
            /**
             * Format: int32
             * @example 123
             */
            user_id?: number;
            /** @example John Delivery */
            name?: string;
            /** @example +1234567890 */
            phone?: string;
            /**
             * @example bike
             * @enum {string}
             */
            vehicle_type?: "bike" | "scooter" | "car" | "bicycle";
            /** @example ABC-1234 */
            vehicle_number?: string;
            /** @example true */
            is_available?: boolean;
            /** @example true */
            is_active?: boolean;
            current_location?: {
                /**
                 * Format: double
                 * @example 40.7128
                 */
                latitude?: number;
                /**
                 * Format: double
                 * @example -74.006
                 */
                longitude?: number;
                /**
                 * Format: date-time
                 * @example 2024-01-15T12:30:00Z
                 */
                updated_at?: string;
            } | null;
            /**
             * Format: decimal
             * @example 4.8
             */
            rating?: number;
            /**
             * Format: int32
             * @example 1250
             */
            total_deliveries?: number;
            /**
             * Format: decimal
             * @example 450.75
             */
            earnings_today?: number;
            /**
             * Format: decimal
             * @example 12500.5
             */
            earnings_this_month?: number;
            /**
             * Format: date-time
             * @example 2024-01-01T10:00:00Z
             */
            created_at?: string;
            /**
             * Format: date-time
             * @example 2024-01-15T12:30:00Z
             */
            updated_at?: string;
        };
        ErrorResponse: {
            /**
             * @description Error message
             * @example Resource not found
             */
            error?: string;
            /**
             * @description Error code
             * @example RESOURCE_NOT_FOUND
             */
            code?: string;
            /** @description Additional error details */
            details?: Record<string, never>;
        };
        ValidationErrorResponse: {
            /**
             * @description Validation error message
             * @example Validation failed
             */
            error?: string;
            /**
             * @description Error code
             * @example VALIDATION_ERROR
             */
            code?: string;
            details?: {
                field_errors?: {
                    /** @example email */
                    field?: string;
                    /** @example Invalid email format */
                    message?: string;
                    /** @example INVALID_FORMAT */
                    code?: string;
                }[];
            };
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
