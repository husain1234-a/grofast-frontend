You are an expert backend architect and Python developer. Build a production-ready, scalable, secure, and modular quick-commerce (q-commerce) platform inspired by Blinkit, starting with a single dark store. The system must support ultra-fast grocery delivery (under 30 mins) with features like cart, checkout, order tracking, delivery partner flow, real-time location sharing, and push notifications — all built using 100% free, open-source, or freemium tools. 

Hard Constraint: Zero Budget. No paid services. All components must be self-hostable or on a generous free tier. 

🛠️ Tech Stack (Free & Open Source Only)
LAYER
TECHNOLOGY
REASON
Backend
FastAPI (Python 3.10+)
Fast, async, OpenAPI-ready
Database
PostgreSQL
Self-hosted, free, robust
ORM
SQLAlchemy 2.0 + asyncpg
Open-source, async support
Caching
Redis (self-hosted)
Free, fast
Message Queue
Celery + Redis
For async tasks
File Storage
Cloudflare R2 (Free Tier: 10GB, 1M downloads/month)
S3-compatible, no egress fees
Authentication
Firebase Authentication (Free Tier)
Phone/email OTP, 10K MAUs free
Push Notifications
Firebase Cloud Messaging (FCM) - Free
Unlimited push
Real-Time Location
Supabase Realtime (Free Tier)
Up to 50 concurrent users, WebSocket auto-handled
Search
Meilisearch (Self-Hosted, Open-Source)
Typo-tolerant, fast, free
Frontend (Reference)
React Native (Expo) / React
Open-source
Hosting
Render.com (Free Tier)
or
Fly.io
or
Railway.app
Free PostgreSQL + Redis
CI/CD
GitHub Actions (Free)
For automated deployment
Logging
Loguru + Papertrail (Free Tier)
Simple logging
Monitoring
Sentry (Free Tier)
Error tracking
SMS (OTP)
Textbelt (Free: 1/day)
or
D7 Network (Free Tier)
Low-volume OTP
Email
Resend (3K free/month)
or
Mailgun (10K free/month)
Transactional emails

🧱 Core Features
User OTP Login (via Firebase Auth)
Product Catalog (CRUD, images, inventory)
Cart Management (add/remove/update)
Delivery Time Slot Selection
Order Placement & Lifecycle Tracking
Delivery Partner Module:
Login
Accept/Reject Orders
Update Status
Share Live GPS Location (via Supabase Realtime)
Push Notifications (via FCM)
Admin View (via direct DB or Supabase UI)
Reviews & Ratings
Coupons & Offers
Cancellation & Refund (manual)
🏗️ Project Structure (No /v1, All Routes in routes/)
blinkit_clone/
│
├── app/
│   ├── main.py                     # FastAPI app instance, middleware, routes mount
│   │
│   ├── config/                     # Configs
│   │   ├── settings.py             # Environment variables (pydantic.BaseSettings)
│   │   └── database.py             # Async engine, session
│   │
│   ├── routes/                     # All API routes (no versioning)
│   │   ├── auth.py                 # /auth/login, /auth/verify-otp
│   │   ├── products.py             # /products, /products/{id}
│   │   ├── cart.py                 # /cart/add, /cart/remove
│   │   ├── orders.py               # /orders/create, /orders/user/{user_id}
│   │   ├── delivery.py             # /delivery/assign, /delivery/location
│   │   ├── notifications.py        # /notifications/send (internal)
│   │   └── admin.py                # /admin/products, /admin/orders
│   │
│   ├── models/                     # SQLAlchemy models
│   │   ├── user.py
│   │   ├── product.py
│   │   ├── cart.py
│   │   ├── order.py
│   │   ├── delivery.py
│   │   └── __init__.py
│   │
│   ├── schemas/                    # Pydantic models
│   │   ├── user.py
│   │   ├── product.py
│   │   ├── cart.py
│   │   ├── order.py
│   │   └── delivery.py
│   │
│   ├── firebase/                   # Firebase Admin SDK
│   │   ├── config.py               # Firebase app init
│   │   └── auth.py                 # Verify ID token
│   │
│   ├── supabase/                   # Supabase client for Realtime
│   │   └── client.py               # Supabase realtime location push
│   │
│   ├── services/                   # Business logic
│   │   ├── auth_service.py
│   │   ├── cart_service.py
│   │   ├── order_service.py
│   │   └── notification_service.py # FCM + email/SMS
│   │
│   ├── celery_tasks/               # Async tasks
│   │   ├── tasks.py                # Celery app, FCM, email, sync location
│   │   └── __init__.py
│   │
│   ├── static/                     # Uploaded files (optional symlink to R2)
│   │
│   └── utils/                      # Helpers
│       ├── location.py             # Distance calculation
│       └── logger.py               # Loguru setup
│
├── migrations/                     # Alembic migrations
│
├── docker-compose.yml              # PostgreSQL, Redis, Meilisearch, FastAPI
├── Dockerfile                      # For FastAPI app
├── celery_worker.py                # Celery worker script
├── .env.example                    # Environment template
├── requirements.txt                # All dependencies
└── README.md                       # Setup, run, deploy guide
🔐 Security & Best Practices
Use Firebase ID tokens (from client) → verify server-side
Rate limiting via Redis (100 req/min per IP)
CORS: Allow localhost, *.web.app, *.firebaseapp.com
Input validation with Pydantic
JWT not stored in DB — stateless auth
Secure headers via middleware
.env for secrets
🔁 Real-Time Location Sharing (No Raw WebSockets)
Use Supabase Realtime: 

Table: delivery_locations (id, delivery_id, lat, lng, timestamp)
Enable Realtime on this table in Supabase Dashboard
FastAPI writes location → Supabase broadcasts to all subscribers
Mobile app (React Native) listens via @supabase/supabase-js
Free for up to 50 concurrent connections
📡 Push Notifications
Use Firebase Cloud Messaging (FCM): 

On order status change, trigger Celery task
Send push to user device (FCM token stored in DB)
Free forever for typical app usage
🐳 Docker & Deployment
docker-compose.yml includes:
postgres:15
redis:7
getmeili/meilisearch:latest
FastAPI app
Deploy to:
Render.com: Free PostgreSQL, free web service (with Redis add-on)
Fly.io: Free Postgres, free VMs
Railway.app: Free tier with PostgreSQL + Redis
All support free SSL, custom domains, and GitHub integration. 

📂 API Routes (No /v1)
/auth/login                 POST    → sends OTP (via Firebase)
/auth/verify-otp            POST    → verifies OTP, returns JWT
/products                   GET     → list all products
/products/{id}              GET     → product detail
/cart/add                   POST    → add item to cart
/cart/remove                POST    → remove item
/orders/create              POST    → create order from cart
/orders/user/{user_id}      GET     → user's order history
/delivery/assign            POST    → assign delivery exec to order
/delivery/location          POST    → update GPS (sync to Supabase)
/delivery/status            PUT     → update delivery status
/notifications/send         POST    → internal (Celery task)
/admin/products             GET/POST → admin product management
📁 Deliverables to Generate
Produce:

Complete project structure as above
main.py with app creation and route mounting
routes/ files with full API endpoints
models/ and schemas/ for core entities
firebase/auth.py to verify Firebase ID token
supabase/client.py to push location to Supabase
celery_tasks/tasks.py for FCM and async updates
docker-compose.yml with PostgreSQL, Redis, Meilisearch
.env.example with all required keys
README.md with setup, run, and deploy instructions
